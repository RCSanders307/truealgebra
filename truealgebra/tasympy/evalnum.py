from truealgebra.core.rules import Rule, Rules, JustOneBU, JustOne
from truealgebra.common.eval_basics import (
    CalcCommAssoc, power_function, divide_function, subtract_function,
    negative_function, multiply_function, add_function,
    EvalMathDictSingle, EvalMathDictDouble,
)
from truealgebra.tasympy.sympynumber import snum

import sympy


num0 = snum.integer('0')
num1 = snum.integer('1')
neg1 = snum.integer('-1')


# Evaluation Rules
# ================

definedfunction_dict = {
        'sin': sympy.sin, 'cos': sympy.cos, 'tan': sympy.tan,
        'csc': sympy.csc, 'sec': sympy.sec, 'cot': sympy.cot,

        'asin': sympy.asin, 'acos': sympy.acos, 'atan': sympy.atan,
        'acsc': sympy.acsc, 'asec': sympy.asec, 'acot': sympy.acot,

        'sinh': sympy.sinh, 'cosh': sympy.cosh, 'tanh': sympy.tanh,
        'csch': sympy.csch, 'sech': sympy.sech, 'coth': sympy.coth,

        'asinh': sympy.asinh, 'acosh': sympy.acosh, 'atanh': sympy.atanh,
        'acsch': sympy.acsch, 'asech': sympy.asech, 'acoth': sympy.acoth,

#       'exp': sympy.exp,
#       'log': sympy.log,
#       'Abs': sympy.Abs,

#       'log10': lambda x: sympy.log(x, 10),
#       '-': negative_function,






'factorial': sympy.factorial,
'factorial2': sympy.factorial2,
'rf': sympy.rf,
'ff': sympy.ff,
'binomial': sympy.binomial,
'subfactorial': sympy. subfactorial, 
'carmichael': sympy.carmichael,
'fibonacci': sympy.fibonacci,
'lucas': sympy.lucas,
'motzkin': sympy.motzkin,
'tribonacci': sympy.tribonacci,
'harmonic': sympy.harmonic,
'bernoulli': sympy.bernoulli,
'bell': sympy.bell,
'euler': sympy.euler,
'catalan': sympy.catalan,
'genocchi': sympy.genocchi,
'andre': sympy.andre,
# 'partitionkronecker_symbol': sympy.partitionkronecker_symbol,
'divisor_sigma': sympy.divisor_sigma,
'legendre_symbol': sympy.legendre_symbol,
'jacobi_symbol': sympy.jacobi_symbol,
'kronecker_symbol': sympy.kronecker_symbol,
'mobius': sympy.mobius,
'primenu': sympy.primenu,
'primeomega': sympy.primeomega,
'totient': sympy.totient,
'reduced_totient': sympy.reduced_totient,
'primepi': sympy.primepi,
'sqrt': sympy.sqrt,
'root': sympy.root,
'real_root': sympy.real_root,
'cbrt': sympy.cbrt,
're': sympy.re,
'im': sympy.im,
'sign': sympy.sign,
'conjugate': sympy.conjugate,
'arg': sympy.arg,
'polar_lift': sympy.polar_lift,
'periodic_argument': sympy.periodic_argument,
'unbranched_argument': sympy.unbranched_argument,
'principal_branch': sympy.principal_branch,
'transpose': sympy.transpose,
'adjoint': sympy.adjoint,
'polarify': sympy.polarify,
'unpolarify': sympy.unpolarify,
'sinc': sympy.sinc,
'atan2': sympy.atan2,
'exp_polar': sympy.exp_polar,
'exp': sympy.exp,
'ln': sympy.ln,
'log': sympy.log,
'floor': sympy.floor,
'ceiling': sympy.ceiling,
'frac': sympy.frac,
'piecewise_fold': sympy.piecewise_fold,
'piecewise_exclusive': sympy.piecewise_exclusive,
'erf': sympy.erf,
'erfc': sympy.erfc,
'erfi': sympy.erfi,
'erf2': sympy.erf2,
'erfinv': sympy.erfinv,
'erfcinv': sympy.erfcinv,
'erf2inv': sympy.erf2inv,
'expint': sympy.expint,
'li': sympy.li,
'fresnels': sympy.fresnels,
'fresnelc': sympy.fresnelc,
'gamma': sympy.gamma,
'lowergamma': sympy.lowergamma,
'uppergamma': sympy.uppergamma,
'polygamma': sympy.polygamma,
'loggamma': sympy.loggamma,
'digamma': sympy.digamma,
'trigamma': sympy.trigamma,
'multigamma': sympy.multigamma,
'dirichlet_eta': sympy.dirichlet_eta,
'zeta': sympy.zeta,
'lerchphi': sympy.lerchphi,
'polylog': sympy.polylog,
'stieltjes': sympy.stieltjes,
'bspline_basis': sympy.bspline_basis,
'bspline_basis_set': sympy.bspline_basis_set,
'interpolating_spline': sympy.interpolating_spline,
'besselj': sympy.besselj,
'bessely': sympy.bessely,
'besseli': sympy.besseli,
'besselk': sympy.besselk,
'hankel1': sympy.hankel1,
'hankel2': sympy.hankel2,
'jn': sympy.jn,
'yn': sympy.yn,
'jn_zeros': sympy.jn_zeros,
'hn1': sympy.hn1,
'hn2': sympy.hn2,
'airyai': sympy.airyai,
'airybi': sympy.airybi,
'airyaiprime': sympy.airyaiprime,
'airybiprime': sympy.airybiprime,
'marcumq': sympy.marcumq,
'hyper': sympy.hyper,
'meijerg': sympy.meijerg,
'appellf1': sympy.appellf1,
'legendre': sympy.legendre,
'assoc_legendre': sympy.assoc_legendre,
'hermite': sympy.hermite,
'hermite_prob': sympy.hermite_prob,
'chebyshevt': sympy.chebyshevt,
'chebyshevu': sympy.chebyshevu,
'chebyshevu_root': sympy.chebyshevu_root,
'chebyshevt_root': sympy.chebyshevt_root,
'laguerre': sympy.laguerre,
'assoc_laguerre': sympy.assoc_laguerre,
'gegenbauer': sympy.gegenbauer,
'jacobi': sympy.jacobi,
'jacobi_normalized': sympy.jacobi_normalized,
'elliptic_k': sympy.elliptic_k,
'elliptic_f': sympy.elliptic_f,
'elliptic_e': sympy.elliptic_e,
'elliptic_pi': sympy.elliptic_pi,
'beta': sympy.beta,
'mathieus': sympy.mathieus,
'mathieuc': sympy.mathieuc,
'mathieusprime': sympy.mathieusprime,
'mathieucprime': sympy.mathieucprime,
'riemann_xi': sympy.riemann_xi,
'betainc': sympy.betainc,
'betainc_regularized': sympy.betainc_regularized,
}


reversed_dict = {
sympy.sin: 'sin',
sympy.cos: 'cos',
sympy.tan: 'tan',
sympy.csc: 'csc',
sympy.sec: 'sec',
sympy.cot: 'cot',

sympy.asin: 'asin',
sympy.acos: 'acos',
sympy.atan: 'atan',

sympy.acsc: 'acsc',
sympy.asec: 'asec',
sympy.acot: 'acot',


sympy.sinh: 'sinh',
sympy.cosh: 'cosh',
sympy.tanh: 'tanh',

sympy.csch: 'csch',
sympy.sech: 'sech',
sympy.coth: 'coth',


sympy.asinh: 'asinh',
sympy.acosh: 'acosh',
sympy.atanh: 'atanh',

sympy.acsch: 'acsch',
sympy.asech: 'asech',
sympy.acoth: 'acoth',



sympy.factorial: 'factorial',
sympy.factorial2: 'factorial2',
sympy.rf: 'rf',
sympy.ff: 'ff',
sympy.binomial: 'binomial',
sympy.subfactorial: ' subfactorial', 
sympy.carmichael: 'carmichael',
sympy.fibonacci: 'fibonacci',
sympy.lucas: 'lucas',
sympy.motzkin: 'motzkin',
sympy.tribonacci: 'tribonacci',
sympy.harmonic: 'harmonic',
sympy.bernoulli: 'bernoulli',
sympy.bell: 'bell',
sympy.euler: 'euler',
sympy.catalan: 'catalan',
sympy.genocchi: 'genocchi',
sympy.andre: 'andre',
sympy.divisor_sigma: 'divisor_sigma',
sympy.legendre_symbol: 'legendre_symbol',
sympy.jacobi_symbol: 'jacobi_symbol',
sympy.kronecker_symbol: 'kronecker_symbol',
sympy.mobius: 'mobius',
sympy.primenu: 'primenu',
sympy.primeomega: 'primeomega',
sympy.totient: 'totient',
sympy.reduced_totient: 'reduced_totient',
sympy.primepi: 'primepi',
sympy.sqrt: 'sqrt',
sympy.root: 'root',
sympy.real_root: 'real_root',
sympy.cbrt: 'cbrt',
sympy.re: 're',
sympy.im: 'im',
sympy.sign: 'sign',
sympy.conjugate: 'conjugate',
sympy.arg: 'arg',
sympy.polar_lift: 'polar_lift',
sympy.periodic_argument: 'periodic_argument',
sympy.unbranched_argument: 'unbranched_argument',
sympy.principal_branch: 'principal_branch',
sympy.transpose: 'transpose',
sympy.adjoint: 'adjoint',
sympy.polarify: 'polarify',
sympy.unpolarify: 'unpolarify',
sympy.sinc: 'sinc',
sympy.atan2: 'atan2',
sympy.exp_polar: 'exp_polar',
sympy.exp: 'exp',
sympy.ln: 'ln',
sympy.log: 'log',
sympy.floor: 'floor',
sympy.ceiling: 'ceiling',
sympy.frac: 'frac',
sympy.piecewise_fold: 'piecewise_fold',
sympy.piecewise_exclusive: 'piecewise_exclusive',
sympy.erf: 'erf',
sympy.erfc: 'erfc',
sympy.erfi: 'erfi',
sympy.erf2: 'erf2',
sympy.erfinv: 'erfinv',
sympy.erfcinv: 'erfcinv',
sympy.erf2inv: 'erf2inv',
sympy.expint: 'expint',
sympy.li: 'li',
sympy.fresnels: 'fresnels',
sympy.fresnelc: 'fresnelc',
sympy.gamma: 'gamma',
sympy.lowergamma: 'lowergamma',
sympy.uppergamma: 'uppergamma',
sympy.polygamma: 'polygamma',
sympy.loggamma: 'loggamma',
sympy.digamma: 'digamma',
sympy.trigamma: 'trigamma',
sympy.multigamma: 'multigamma',
sympy.dirichlet_eta: 'dirichlet_eta',
sympy.zeta: 'zeta',
sympy.lerchphi: 'lerchphi',
sympy.polylog: 'polylog',
sympy.stieltjes: 'stieltjes',
sympy.bspline_basis: 'bspline_basis',
sympy.bspline_basis_set: 'bspline_basis_set',
sympy.interpolating_spline: 'interpolating_spline',
sympy.besselj: 'besselj',
sympy.bessely: 'bessely',
sympy.besseli: 'besseli',
sympy.besselk: 'besselk',
sympy.hankel1: 'hankel1',
sympy.hankel2: 'hankel2',
sympy.jn: 'jn',
sympy.yn: 'yn',
sympy.jn_zeros: 'jn_zeros',
sympy.hn1: 'hn1',
sympy.hn2: 'hn2',
sympy.airyai: 'airyai',
sympy.airybi: 'airybi',
sympy.airyaiprime: 'airyaiprime',
sympy.airybiprime: 'airybiprime',
sympy.marcumq: 'marcumq',
sympy.hyper: 'hyper',
sympy.meijerg: 'meijerg',
sympy.appellf1: 'appellf1',
sympy.legendre: 'legendre',
sympy.assoc_legendre: 'assoc_legendre',
sympy.hermite: 'hermite',
sympy.hermite_prob: 'hermite_prob',
sympy.chebyshevt: 'chebyshevt',
sympy.chebyshevu: 'chebyshevu',
sympy.chebyshevu_root: 'chebyshevu_root',
sympy.chebyshevt_root: 'chebyshevt_root',
sympy.laguerre: 'laguerre',
sympy.assoc_laguerre: 'assoc_laguerre',
sympy.gegenbauer: 'gegenbauer',
sympy.jacobi: 'jacobi',
sympy.jacobi_normalized: 'jacobi_normalized',
sympy.elliptic_k: 'elliptic_k',
sympy.elliptic_f: 'elliptic_f',
sympy.elliptic_e: 'elliptic_e',
sympy.elliptic_pi: 'elliptic_pi',
sympy.beta: 'beta',
sympy.mathieus: 'mathieus',
sympy.mathieuc: 'mathieuc',
sympy.mathieusprime: 'mathieusprime',
sympy.mathieucprime: 'mathieucprime',
sympy.riemann_xi: 'riemann_xi',
sympy.betainc: 'betainc',
sympy.betainc_regularized: 'betainc_regularized',
}








#       RisingFactorial, FallingFactorial,
#    Min,
#    Max,
#    Id,
#    Rem,
#    Abs,
#    LambertW,
#    Piecewise,
#    Ei,
#    E1,
#    Li,
#    Si,
#    Ci,
#    Shi,
#    Chi,
#    Eijk,
#    LeviCivita,
#    KroneckerDelta,
#    SingularityFunction,
#    DiracDelta,
#    Heaviside,
#    Ynm,
#    Ynm_c,
#    Znm,


multiply= CalcCommAssoc(name='*', ident=num1, func=multiply_function)
add = CalcCommAssoc(name='+', ident=num0, func=add_function)

evalmathsingle = EvalMathDictSingle(
    namedict={
        'sin': sympy.sin,
        'cos': sympy.cos,
        'tan': sympy.tan,
        'csc': sympy.csc,
        'sec': sympy.sec,
        'cot': sympy.cot,

        'asin': sympy.asin,
        'acos': sympy.acos,
        'atan': sympy.atan,
        'acsc': sympy.acsc,
        'asec': sympy.asec,
        'acot': sympy.acot,

        'sinh': sympy.sinh,
        'cosh': sympy.cosh,
        'tanh': sympy.tanh,
        'csch': sympy.csch,
        'sech': sympy.sech,
        'coth': sympy.coth,

        'asinh': sympy.asinh,
        'acosh': sympy.acosh,
        'atanh': sympy.atanh,
        'acsch': sympy.acsch,
        'asech': sympy.asech,
        'acoth': sympy.acoth,

        'exp': sympy.exp,
        'log': sympy.log,
        'log10': lambda x: sympy.log(x, 10),
        'Abs': sympy.Abs,

        '-': negative_function,
    }
)

evalmathdouble = EvalMathDictDouble(
    namedict={
        '**': power_function,
        '/': divide_function,
        '-': subtract_function,
        'log': sympy.log,
    }
)


evalnum = JustOne(multiply, add, evalmathsingle, evalmathdouble)
evalnumbu = JustOneBU(multiply, add, evalmathsingle, evalmathdouble)
